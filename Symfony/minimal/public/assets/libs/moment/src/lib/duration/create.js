import{Duration,isDuration}from"./constructor";import isNumber from"../utils/is-number";import toInt from"../utils/to-int";import absRound from"../utils/abs-round";import hasOwnProp from"../utils/has-own-prop";import{DATE,HOUR,MINUTE,SECOND,MILLISECOND}from"../units/constants";import{cloneWithOffset}from"../units/offset";import{createLocal}from"../create/local";import{createInvalid as invalid}from"./valid";var aspNetRegex=/^(\-|\+)?(?:(\d*)[. ])?(\d+)\:(\d+)(?:\:(\d+)(\.\d*)?)?$/,isoRegex=/^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;export function createDuration(o,e){var t,s,n,i=o,r=null;return isDuration(o)?i={ms:o._milliseconds,d:o._days,M:o._months}:isNumber(o)?(i={},e?i[e]=o:i.milliseconds=o):(r=aspNetRegex.exec(o))?(t="-"===r[1]?-1:1,i={y:0,d:toInt(r[DATE])*t,h:toInt(r[HOUR])*t,m:toInt(r[MINUTE])*t,s:toInt(r[SECOND])*t,ms:toInt(absRound(1e3*r[MILLISECOND]))*t}):(r=isoRegex.exec(o))?(t="-"===r[1]?-1:1,i={y:parseIso(r[2],t),M:parseIso(r[3],t),w:parseIso(r[4],t),d:parseIso(r[5],t),h:parseIso(r[6],t),m:parseIso(r[7],t),s:parseIso(r[8],t)}):null==i?i={}:"object"==typeof i&&("from"in i||"to"in i)&&(n=momentsDifference(createLocal(i.from),createLocal(i.to)),(i={}).ms=n.milliseconds,i.M=n.months),s=new Duration(i),isDuration(o)&&hasOwnProp(o,"_locale")&&(s._locale=o._locale),s}function parseIso(o,e){var t=o&&parseFloat(o.replace(",","."));return(isNaN(t)?0:t)*e}function positiveMomentsDifference(o,e){var t={};return t.months=e.month()-o.month()+12*(e.year()-o.year()),o.clone().add(t.months,"M").isAfter(e)&&--t.months,t.milliseconds=+e-+o.clone().add(t.months,"M"),t}function momentsDifference(o,e){var t;return o.isValid()&&e.isValid()?(e=cloneWithOffset(e,o),o.isBefore(e)?t=positiveMomentsDifference(o,e):((t=positiveMomentsDifference(e,o)).milliseconds=-t.milliseconds,t.months=-t.months),t):{milliseconds:0,months:0}}createDuration.fn=Duration.prototype,createDuration.invalid=invalid;