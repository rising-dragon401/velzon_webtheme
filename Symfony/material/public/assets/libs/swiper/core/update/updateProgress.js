export default function updateProgress(e){const s=this;if(void 0===e){const t=s.rtlTranslate?-1:1;e=s&&s.translate&&s.translate*t||0}const t=s.params,i=s.maxTranslate()-s.minTranslate();let{progress:a,isBeginning:n,isEnd:r,progressLoop:d}=s;const o=n,l=r;if(0===i)a=0,n=!0,r=!0;else{a=(e-s.minTranslate())/i;const t=Math.abs(e-s.minTranslate())<1,d=Math.abs(e-s.maxTranslate())<1;n=t||a<=0,r=d||a>=1,t&&(a=0),d&&(a=1)}if(t.loop){const t=s.getSlideIndexByData(0),i=s.getSlideIndexByData(s.slides.length-1),a=s.slidesGrid[t],n=s.slidesGrid[i],r=s.slidesGrid[s.slidesGrid.length-1],o=Math.abs(e);d=o>=a?(o-a)/r:(o+r-n)/r,d>1&&(d-=1)}Object.assign(s,{progress:a,progressLoop:d,isBeginning:n,isEnd:r}),(t.watchSlidesProgress||t.centeredSlides&&t.autoHeight)&&s.updateSlidesProgress(e),n&&!o&&s.emit("reachBeginning toEdge"),r&&!l&&s.emit("reachEnd toEdge"),(o&&!n||l&&!r)&&s.emit("fromEdge"),s.emit("progress",a)}